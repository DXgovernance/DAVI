[
  {
    "title": "Vesting contract for DXD token",
    "tags": ["DXD", "DXdao", "factory"],
    "networks": {
      "5": "0x0000000000000000000000000000000000000000",
      "1337": "0x0000000000000000000000000000000000000000"
    },
    "functions": [
      {
        "title": "Create vesting contract",
        "functionName": "create",
        "params": [
          {
            "type": "address",
            "component": "address",
            "name": "beneficiary",
            "defaultValue": "",
            "description": "Receiving address of tokens"
          },
          {
            "type": "uint256",
            "component": "date",
            "name": "start",
            "defaultValue": "",
            "description": "Starting time for contract"
          },
          {
            "type": "uint256",
            "component": "time",
            "name": "cliffDuration",
            "defaultValue": "",
            "description": "How long before cliff"
          },
          {
            "type": "uint256",
            "component": "time",
            "name": "duration",
            "defaultValue": "",
            "description": "How long before contract finishes fully"
          },
          {
            "type": "uint256",
            "component": "tokenAmount",
            "name": "value",
            "defaultValue": "",
            "description": "Number of tokens to vest"
          }
        ],
        "shortDescription": "Creates DXD vesting contracts for worker proposals",
        "longDescription": "Factory contract to create new vesting contracts for the ERC20 token DXD with owenership then passed to the DXdao",
        "spendsTokens": true,
        "templateLiteral": "Vest ${value} ${approvalTokenSymbol} for ${duration} with ${cliffDuration} cliff for ${beneficiary}"
      }
    ]
  },
  {
    "title": "Swapr fees",
    "tags": ["DXgov", "Guilds", "permissions"],
    "networks": {
      "5": "0x885b28d6b93087623483af5e5f7362bd6d8a0a6b",
      "1337": "0x0000000000000000000000000000000000000000"
    },
    "functions": [
      {
        "title": "Set fee for a pool",
        "functionName": "setSwapFee",
        "params": [
          {
            "type": "address",
            "component": "swaprPicker",
            "name": "pair",
            "title": "Pool",
            "defaultValue": "",
            "description": "Pool pair to set fee on"
          },
          {
            "type": "uint32",
            "component": "integer",
            "name": "swapFee",
            "title": "Swap Fee %",
            "defaultValue": "",
            "description": "Fee to be set for pair (10 = 0.1%)"
          }
        ],
        "shortDescription": "Sets the swap fee for a given pool on swapr",
        "longDescription": "Sets the overall fee taken from a specific pool in swapr on this chain",
        "templateLiteral": "Set fee for ${pair} to ${swapFee}",
        "spendsTokens": false
      }
    ]
  },
  {
    "title": "DXdao Voting",
    "tags": ["DXgov", "Guilds", "DXdao"],
    "networks": {
      "1": "0x332B8C9734b4097dE50f302F7D9F273FFdB45B84",
      "5": "0xC284e9F6aBc7c65C277244895CAae401e643E4b6",
      "100": "0xDA309aDF1c84242Bb446F7CDBa96B570E901D4CF",
      "1337": "0x0000000000000000000000000000000000000000"
    },
    "functions": [
      {
        "title": "Vote For proposal",
        "functionName": "vote",
        "params": [
          {
            "type": "bytes32",
            "component": "string",
            "name": "proposalId",
            "title": "Proposal ID",
            "description": "Proposal ID - found from the URL of proposal"
          },
          {
            "type": "uint256",
            "component": "integer",
            "name": "vote",
            "title": "Vote decision",
            "defaultValue": "1",
            "description": "Vote decision (NO(2) or YES(1))"
          },
          {
            "type": "uint256",
            "component": "tokenAmount",
            "name": "amount",
            "title": "Amount to vote with",
            "defaultValue": "",
            "description": "Amount of REP to vote with"
          },
          {
            "type": "address",
            "component": "address",
            "name": "voter",
            "title": "Voter",
            "defaultValue": "0x99Fa013188d5f1dB6836Ee8805Ef37BE70ff10BE",
            "description": "The guild's address"
          }
        ],
        "shortDescription": "Votes on a proposal with the guild's power",
        "longDescription": "Creates a mirror proposal to use this guild's power to vote on a DXdao proposal. Care needs to be taken to finish this proposal before the DXdao proposal finishes.",
        "templateLiteral": "Vote ${vote} with ${amount} REP on ${proposalId}",
        "spendsTokens": false
      },
      {
        "title": "Vote Against proposal",
        "functionName": "vote",
        "params": [
          {
            "type": "bytes32",
            "component": "string",
            "name": "proposalId",
            "title": "Proposal ID",
            "description": "Proposal ID - found from the URL of proposal"
          },
          {
            "type": "uint256",
            "component": "integer",
            "name": "vote",
            "title": "Vote decision",
            "defaultValue": "2",
            "description": "Vote decision (NO(2) or YES(1))"
          },
          {
            "type": "uint256",
            "component": "tokenAmount",
            "name": "amount",
            "title": "Amount of REP to vote with",
            "defaultValue": "",
            "description": "Amount to vote with"
          },
          {
            "type": "address",
            "component": "address",
            "name": "voter",
            "title": "Voter",
            "defaultValue": "0x99Fa013188d5f1dB6836Ee8805Ef37BE70ff10BE",
            "description": "The guild's address"
          } 
        ],
        "shortDescription": "Votes on a proposal with the guild's power",
        "longDescription": "Creates a mirror proposal to use this guild's power to vote on a DXdao proposal. Care needs to be taken to finish this proposal before the DXdao proposal finishes.",
        "templateLiteral": "Vote ${vote} with ${amount} REP on ${proposalId}",
        "spendsTokens": false
      }
    ]
  },
  {
    "title": "ENS Registry",
    "tags": ["ens"],
    "networks": {
      "1": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    },
    "functions": [
      {
        "title": "Create subdomain",
        "functionName": "setSubnodeRecord",
        "params": [
          {
            "type": "bytes32",
            "component": "text",
            "name": "node",
            "title": "Subdomain node",
            "defaultValue": "",
            "description": "Name of parent ENS to set (e.g. projectdavi.eth)"
          },
          {
            "type": "bytes32",
            "component": "text",
            "name": "label",
            "title": "Subdomain label",
            "defaultValue": "",
            "description": "Name of new subdomain label"
          },
          {
            "type": "address",
            "component": "address",
            "name": "owner",
            "title": "ENS owner (the guild)",
            "defaultValue": "",
            "description": "Address of ENS owner"
          },
          {
            "type": "address",
            "component": "address",
            "name": "resolver",
            "title": "ENS Resolver",
            "defaultValue": "0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41",
            "description": "Address of ENS resolver"
          },
          {
            "type": "uint64",
            "component": "integer",
            "name": "ttl",
            "title": "Time to live",
            "defaultValue": "0",
            "description": "Time to live"
          }
        ],
        "shortDescription": "Creates a subdomain",
        "longDescription": "Creates a subdomain from an ENS name the guild is controller of",
        "templateLiteral": "Create an ENS subdomain",
        "spendsTokens": false
      },
      {
        "title": "Transfer subdomain",
        "functionName": "setSubnodeOwner",
        "params": [
          {
            "type": "bytes32",
            "component": "text",
            "name": "node",
            "title": "Subdomain node",
            "defaultValue": "",
            "description": "Name of parent ENS to set (e.g. projectdavi.eth)"
          },
          {
            "type": "bytes32",
            "component": "text",
            "name": "label",
            "title": "Subdomain label",
            "defaultValue": "",
            "description": "Name of subdomain label"
          },
          {
            "type": "address",
            "component": "address",
            "name": "owner",
            "title": "ENS owner (the guild)",
            "defaultValue": "",
            "description": "Address of new ENS owner"
          }
        ],
        "shortDescription": "Transfers ENS subdomain",
        "longDescription": "Transfers ENS subdomain",
        "templateLiteral": "Transfer ENS subdomain to ${owner}",
        "spendsTokens": false
      },
      {
        "title": "Transfer ENS",
        "functionName": "setOwner",
        "params": [
          {
            "type": "bytes32",
            "component": "text",
            "name": "node",
            "title": "Subdomain node",
            "defaultValue": "",
            "description": "Name of parent ENS to set (e.g. projectdavi.eth)"
          },
          {
            "type": "address",
            "component": "address",
            "name": "owner",
            "title": "ENS owner (the guild)",
            "defaultValue": "",
            "description": "Address of new ENS owner"
          }
        ],
        "shortDescription": "Transfers a root ENS domain",
        "longDescription": "Transfers a root ENS domain",
        "templateLiteral": "Transfer ENS to ${owner}",
        "spendsTokens": false
      }
    ]
  }
]
